{"version":3,"file":"index.js","sources":["../dist-src/index.js"],"sourcesContent":["/*\nDefault comparison function to be used\n*/\nfunction defaultCmp(x, y) {\n    if (x < y) {\n        return -1;\n    }\n    if (x > y) {\n        return 1;\n    }\n    return 0;\n}\n/*\nInsert item x in list a, and keep it sorted assuMath.ming a is sorted.\n\nIf x is already in a, insert it to the right of the rightmost x.\n\nOptional args lo (default 0) and hi (default a.length) bound the slice\nof a to be searched.\n*/\nfunction insort(a, x, lo = 0, hi, cmp = defaultCmp) {\n    var mid;\n    if (lo < 0) {\n        throw new Error(\"lo must be non-negative\");\n    }\n    if (hi == null) {\n        hi = a.length;\n    }\n    while (lo < hi) {\n        mid = Math.floor((lo + hi) / 2);\n        if (cmp(x, a[mid]) < 0) {\n            hi = mid;\n        }\n        else {\n            lo = mid + 1;\n        }\n    }\n    return a.splice(lo, lo - lo, x);\n}\n/*\nPush item onto heap, maintaining the heap invariant.\n*/\nfunction heappush(array, item, cmp = defaultCmp) {\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n}\n/*\nPop the smallest item off the heap, maintaining the heap invariant.\n*/\nfunction heappop(array, cmp = defaultCmp) {\n    var lastelt, returnitem;\n    lastelt = array.pop();\n    if (array.length) {\n        returnitem = array[0];\n        array[0] = lastelt;\n        _siftup(array, 0, cmp);\n    }\n    else {\n        returnitem = lastelt;\n    }\n    return returnitem;\n}\n/*\nPop and return the current smallest value, and add the new item.\n\nThis is more efficient than heappop() followed by heappush(), and can be\nmore appropriate when using a fixed size heap. Note that the value\nreturned may be larger than item! That constrains reasonable use of\nthis routine unless written as part of a conditional replacement:\n    if item > array[0]\n      item = heapreplace(array, item)\n*/\nfunction heapreplace(array, item, cmp = defaultCmp) {\n    var returnitem;\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n}\n/*\nFast version of a heappush followed by a heappop.\n*/\nfunction heappushpop(array, item, cmp = defaultCmp) {\n    var _ref;\n    if (array.length && cmp(array[0], item) < 0) {\n        (_ref = [array[0], item]), (item = _ref[0]), (array[0] = _ref[1]);\n        _siftup(array, 0, cmp);\n    }\n    return item;\n}\n/*\nTransform list into a heap, in-place, in O(array.length) time.\n*/\nfunction heapify(array, cmp = defaultCmp) {\n    const size = Math.floor(array.length / 2);\n    let i = size;\n    const result = [];\n    while (i--) {\n        result[i] = _siftup(array, size - 1 - i, cmp);\n    }\n    return result;\n}\n/*\nUpdate the position of the given item in the heap.\nThis function should be called every time the item is being modified.\n*/\nfunction updateItem(array, item, cmp = defaultCmp) {\n    var pos;\n    pos = array.indexOf(item);\n    if (pos === -1) {\n        return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n}\n/*\nFind the n largest elements in a dataset.\n*/\nfunction nlargest(array, n, cmp = defaultCmp) {\n    var result;\n    result = array.slice(0, n);\n    if (!result.length) {\n        return result;\n    }\n    heapify(result, cmp);\n    array.slice(n).forEach((elem) => heappushpop(result, elem, cmp));\n    return result.sort(cmp).reverse();\n}\n/*\nFind the n smallest elements in a dataset.\n*/\nfunction nsmallest(array, n, cmp = defaultCmp) {\n    var los, result;\n    if (n * 10 <= array.length) {\n        result = array.slice(0, n).sort(cmp);\n        if (!result.length) {\n            return result;\n        }\n        los = result[result.length - 1];\n        array.slice(n).forEach((elem) => {\n            if (cmp(elem, los) < 0) {\n                insort(result, elem, 0, null, cmp);\n                result.pop();\n                return (los = result[result.length - 1]);\n            }\n        });\n        return result;\n    }\n    heapify(array, cmp);\n    let i = Math.min(n, array.length);\n    const r = [];\n    while (i--) {\n        r[i] = heappop(array, cmp);\n    }\n    return r;\n}\nfunction _siftdown(array, startpos, pos, cmp = defaultCmp) {\n    var newitem, parent, parentpos;\n    newitem = array[pos];\n    while (pos > startpos) {\n        parentpos = (pos - 1) >> 1;\n        parent = array[parentpos];\n        if (cmp(newitem, parent) < 0) {\n            array[pos] = parent;\n            pos = parentpos;\n            continue;\n        }\n        break;\n    }\n    return (array[pos] = newitem);\n}\nfunction _siftup(array, pos, cmp = defaultCmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n        rightpos = childpos + 1;\n        if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n            childpos = rightpos;\n        }\n        array[pos] = array[childpos];\n        pos = childpos;\n        childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n}\nclass Heap {\n    constructor(cmp = defaultCmp) {\n        this.cmp = cmp;\n        this.nodes = [];\n        this.nodes = [];\n    }\n    push(x) {\n        return heappush(this.nodes, x, this.cmp);\n    }\n    pop() {\n        return heappop(this.nodes, this.cmp);\n    }\n    peek() {\n        return this.nodes[0];\n    }\n    contains(x) {\n        return this.nodes.indexOf(x) !== -1;\n    }\n    replace(x) {\n        return heapreplace(this.nodes, x, this.cmp);\n    }\n    pushpop(x) {\n        return heappushpop(this.nodes, x, this.cmp);\n    }\n    heapify() {\n        return heapify(this.nodes, this.cmp);\n    }\n    updateItem(x) {\n        return updateItem(this.nodes, x, this.cmp);\n    }\n    clear() {\n        return (this.nodes = []);\n    }\n    empty() {\n        return this.nodes.length === 0;\n    }\n    size() {\n        return this.nodes.length;\n    }\n    clone() {\n        var heap;\n        heap = new Heap();\n        heap.nodes = this.nodes.slice(0);\n        return heap;\n    }\n    toArray() {\n        return this.nodes.slice(0);\n    }\n}\nHeap.push = heappush;\nHeap.pop = heappop;\nHeap.replace = heapreplace;\nHeap.pushpop = heappushpop;\nHeap.heapify = heapify;\nHeap.updateItem = updateItem;\nHeap.nlargest = nlargest;\nHeap.nsmallest = nsmallest;\nHeap.prototype.insert = Heap.prototype.push;\nHeap.prototype.top = Heap.prototype.peek;\nHeap.prototype.front = Heap.prototype.peek;\nHeap.prototype.has = Heap.prototype.contains;\nHeap.prototype.copy = Heap.prototype.clone;\nexport default Heap;\n"],"names":[],"mappings":"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"}